{"version":3,"sources":["../src/Docker.js"],"names":["Docker","socketPath","undefined","type","info","dockerode","_dockerode","repoTag","onProgress","normalizedRepoTag","Promise","resolve","reject","pull","err","outStream","parser","parse","onData","onError","onEnd","removeListener","event","error","on","pipe","opts","Image","builder","bind","port","hostPort","hostIp","PortBindings","binding","HostPort","HostIp","push","env","envVar","value","Env","build","createContainer"],"mappings":"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","file":"Docker.js","sourcesContent":["import Dockerode from 'dockerode';\nimport { log } from 'froq-util';\nimport JSONStream from 'JSONStream';\nimport os from 'os';\n\nimport { normalizeRepoTag } from './util';\nimport Container from './Container';\nimport PullEvent from './PullEvent';\n\nexport default class Docker {\n\n    static fromSocket(socketPath = undefined) {\n        \n        if (socketPath === undefined) {\n            socketPath = (os.type() === 'Windows_NT') ? '//./pipe/docker_engine' : '/var/run/docker.sock';\n        }\n        \n        log.info(`create docker from sock file: ${socketPath}`);\n        return new Docker(new Dockerode({socketPath}));\n    }\n\n    /**\n     * \n     * @param {Dockerode} dockerode \n     */\n    constructor(dockerode) {\n        this._dockerode = dockerode;\n    }\n\n    /**\n     * \n     * @param {string} repoTag \n     * @param {(event: PullEvent) => void} onProgress \n     */\n    async pull(repoTag, onProgress) {\n        const normalizedRepoTag = normalizeRepoTag(repoTag);\n\n        log.info(`pull ${repoTag} (${normalizedRepoTag})`);\n        return new Promise((resolve, reject) => {\n            this._dockerode.pull(normalizedRepoTag, undefined, (err, outStream) => {\n                if (err) {\n                    return reject(err);\n                }\n\n                const parser = JSONStream.parse();\n\n                let onData, onError, onEnd;\n\n                const removeListener = () => {\n                    parser.removeListener('data', onData);\n                    parser.removeListener('error', onError);\n                    parser.removeListener('end', onEnd);\n                };\n\n                onData = event => {\n                    if (event.error) {\n                        return onError(event.error);\n                    }\n\n                    if (onProgress) {\n                        onProgress(new PullEvent(event));\n                    }\n                };\n\n                onError = err => {\n                    removeListener();\n                    reject(err);\n                };\n\n                onEnd = event => {\n                    removeListener();\n                    log.info(`pull finish ${repoTag}`);\n                    resolve();\n                };\n\n                parser.on('data', onData);\n                parser.on('error', onError);\n                parser.on('end', onEnd);\n\n                outStream.pipe(parser);\n            });\n        });\n    }\n\n    createContainer(repoTag) {\n        const opts = {\n            Image: normalizeRepoTag(repoTag)\n        };\n\n        const builder = {\n            bind: (port, hostPort = '', hostIp = undefined) => {\n                opts.PortBindings = opts.PortBindings || {};\n                opts.PortBindings[port] = opts.PortBindings[port] || [];\n\n                const binding = {\n                    HostPort: hostPort\n                };\n                if (hostIp !== undefined) {\n                    binding.HostIp = hostIp;\n                }\n                opts.PortBindings[port].push(binding);\n\n                return builder;\n            },\n            env: (envVar, value) => {\n                opts.Env = opts.Env || [];\n                opts.Env.push(`${envVar}=${value}`);\n                return builder;\n            },\n\n            build: async () => {\n                log.info(`build container ${repoTag}`);\n                return new Container(await this._dockerode.createContainer(opts));\n            }\n        };\n\n        return builder;\n    }\n}"]}