{"version":3,"sources":["../src/Container.js"],"names":["Container","container","_container","info","start","startResult","inspect","_inspection","stop","result","remove","port","NetworkSettings","Ports","map","x","HostIp","HostPort","addresses","getHostAddresses","length"],"mappings":";;;;;;;;AAAA;;AACA;;;;;;;;;;IAEqBA,S;;AAEjB;;;;AAIA,uBAAYC,SAAZ,EAAuB;AAAA;;AACnB,aAAKC,UAAL,GAAkBD,SAAlB;AACH;;;;;;;;;;;AAGG,8CAAIE,IAAJ,CAAS,iBAAT;;uCAC0B,KAAKD,UAAL,CAAgBE,KAAhB,E;;;AAApBC,2C;;uCACmB,KAAKC,OAAL,E;;;AAAzB,qCAAKC,W;;;AAEL,8CAAIJ,IAAJ,CAAS,sBAAT;;iEAEOE,W;;;;;;;;;;;;;;;;;;;;;;;;;AAIP,8CAAIF,IAAJ,CAAS,gBAAT;;uCACqB,KAAKD,UAAL,CAAgBM,IAAhB,E;;;AAAfC,sC;;AACN,8CAAIN,IAAJ,CAAS,qBAAT;kEACOM,M;;;;;;;;;;;;;;;;;;;;;;;;;AAIP,8CAAIN,IAAJ,CAAS,kBAAT;;uCACqB,KAAKD,UAAL,CAAgBQ,MAAhB,E;;;AAAfD,sC;;AACN,8CAAIN,IAAJ,CAAS,uBAAT;kEACOM,M;;;;;;;;;;;;;;;;;;;;;;;;;AAIP,8CAAIN,IAAJ,CAAS,mBAAT;;uCACqB,KAAKD,UAAL,CAAgBI,OAAhB,E;;;AAAfG,sC;;AACN,8CAAIN,IAAJ,CAAS,wBAAT;;kEAEOM,M;;;;;;;;;;;;;;;;;;yCAGME,I,EAAM;AACnB,mBAAO,KAAKJ,WAAL,CAAiBK,eAAjB,CAAiCC,KAAjC,CAAuCF,IAAvC,EAA6CG,GAA7C,CAAiD;AAAA,uBAAQC,EAAEC,MAAV,SAAoBD,EAAEE,QAAtB;AAAA,aAAjD,CAAP,CADmB,CACwE;AAC9F;;;uCAEcN,I,EAAM;AACjB,gBAAMO,YAAY,KAAKC,gBAAL,CAAsBR,IAAtB,CAAlB;AACA,gBAAIO,UAAUE,MAAV,KAAqB,CAAzB,EAA4B;AACxB,uBAAO,IAAP;AACH;;AAED,mBAAOF,UAAU,CAAV,CAAP;AACH;;;;;;kBArDgBlB,S","file":"Container.js","sourcesContent":["import { log } from 'froq-util';\nimport Dockerode from 'dockerode';\n\nexport default class Container {\n    \n    /**\n     * \n     * @param {Dockerode.Container} container \n     */\n    constructor(container) {\n        this._container = container;\n    }\n\n    async start() {\n        log.info('start container');\n        const startResult = await this._container.start()\n        this._inspection = await this.inspect();\n\n        log.info('start container done');\n\n        return startResult;\n    }\n\n    async stop() {\n        log.info('stop container');\n        const result = await this._container.stop();\n        log.info('stop container done');\n        return result;\n    }\n       \n    async remove() {\n        log.info('remove container');\n        const result = await this._container.remove();\n        log.info('remove container done');\n        return result;\n    }\n    \n    async inspect() {\n        log.info('inspect container');\n        const result = await this._container.inspect();\n        log.info('inspect container done');\n\n        return result;\n    }\n\n    getHostAddresses(port) {\n        return this._inspection.NetworkSettings.Ports[port].map(x => `${x.HostIp}:${x.HostPort}`); // IPv6?\n    }\n\n    getHostAddress(port) {\n        const addresses = this.getHostAddresses(port);\n        if (addresses.length === 0) {\n            return null;\n        }\n        \n        return addresses[0];\n    }\n}"]}