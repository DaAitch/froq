{"version":3,"sources":["../src/Rest.js"],"names":["Rest","route","router","placeholders","server","_route","_router","_placeholders","_server","type","_type","respondParam","add","processor","req","resp","result","innerRespondParam","Function","body","undefined","end","isQResponse","statusCode","status","debug","setHeader","write","text","error","expr","name","target","address","proxy","createProxyServer","ws","changeOrigin","Promise","resolve","reject","info","method","url","_name","web","on"],"mappings":"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","file":"Rest.js","sourcesContent":["import { log } from 'froq-util';\nimport httpProxy from 'http-proxy';\nimport Route from './Route';\nimport { contentTypeLookupOrThrow, resultByPlaceholders, qSymbol, respBodyForType, reqBodyForType } from './util';\n\nexport default class Rest {\n\n    /**\n     * \n     * @param {Route} route \n     */\n    constructor({route, router, placeholders, server}) {\n        this._route = route;\n        this._router = router;\n        this._placeholders = placeholders;\n        this._server = server;\n    }\n\n    type(type) {\n        this._type = contentTypeLookupOrThrow(type);\n        return this;\n    }\n\n    respond(respondParam) {\n        \n        this._router.add(this._route);\n        this._route.processor = async (req, resp, result) => {\n            let innerRespondParam = respondParam;\n            \n            result = resultByPlaceholders(this._placeholders, result);\n            \n            if (innerRespondParam instanceof Function) {\n                innerRespondParam = innerRespondParam({\n                    body: await reqBodyForType(req),\n                    result\n                });\n            }\n            \n        \n            if (innerRespondParam === null || innerRespondParam === undefined) {\n                resp.end();\n                return;\n            }\n    \n            const isQResponse = typeof innerRespondParam === 'object' && qSymbol in innerRespondParam;\n    \n            let type = undefined;\n        \n            if (isQResponse) {\n                if ('status' in innerRespondParam) {\n                    resp.statusCode = innerRespondParam.status;\n                }\n        \n                if ('type' in innerRespondParam) {\n                    log.debug(`using type ${innerRespondParam.type} from response type`);\n                    type = contentTypeLookupOrThrow(innerRespondParam.type);\n                    resp.setHeader('content-type', type);\n                }\n        \n                if ('body' in innerRespondParam) {\n                    resp.write(respBodyForType(type, innerRespondParam.body));\n                }\n        \n                if ('text' in innerRespondParam) {\n                    resp.write(innerRespondParam.text);\n                }\n            }\n            \n            if (!type) {\n                if (this._type !== undefined) {\n                    log.debug(`using type ${this._type} from rest type`);\n                    type = this._type;\n                } else if (this._server.type !== undefined) {\n                    log.debug(`using type ${this._server._type} from server type`);\n                    type = this._server._type;\n                }\n    \n                if (type) {\n                    resp.setHeader('content-type', type);\n                } else {\n                    log.error(`unknown type!`);\n                }\n                \n            }\n            \n            if (!isQResponse) {\n                resp.write(respBodyForType(type, innerRespondParam));\n            }\n    \n            resp.end();\n        };\n\n        \n        return this._server;\n    }\n\n    proxy(expr) {\n\n        let name = expr;\n        let target = expr;\n        if (typeof expr !== 'string') {\n            name = expr.name;\n            target = `http://${expr.address}`;\n        }\n    \n        const proxy = httpProxy.createProxyServer({\n            target,\n            ws: true,\n            changeOrigin: true\n        });\n    \n        this._route.processor = (req, resp, result) => {\n            return new Promise((resolve, reject) => {\n                log.info(`using proxy: ${req.method} ${req.url} -> ${this._server._name}(${target})`);\n                proxy.web(req, resp);\n    \n                resp\n                    .on('finish', resolve)\n                    .on('error', reject)\n                ;\n            });\n        };\n    \n        this._router.add(this._route);\n        \n        return this._server;\n    }\n}"]}