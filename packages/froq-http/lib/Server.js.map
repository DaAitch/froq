{"version":3,"sources":["../src/Server.js"],"names":["Server","name","port","_name","_port","_connection","_router","setHandler","req","resp","next","handle","start","stop","path","address","type","_type","strings","placeholders","method","route","matcher","result","url","debug","join","processor","Error","router","server","family"],"mappings":";;;;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAGA;;;;;;;;;;IAEqBA,M;AACjB,oBAAYC,IAAZ,EAAkBC,IAAlB,EAAwB;AAAA;;AAAA;;AACpB,aAAKC,KAAL,GAAaF,IAAb;AACA,aAAKG,KAAL,GAAaF,IAAb;;AAEA,aAAKG,WAAL,GAAmB,yBAAeJ,IAAf,CAAnB;AACA,aAAKK,OAAL,GAAe,sBAAf;;AAEA,aAAKD,WAAL,CAAiBE,UAAjB,CAA4B,UAACC,GAAD,EAAMC,IAAN,EAAYC,IAAZ;AAAA,mBAAqB,MAAKJ,OAAL,CAAaK,MAAb,CAAoBH,GAApB,EAAyBC,IAAzB,EAA+BC,IAA/B,CAArB;AAAA,SAA5B;AACH;;;;;;;;;;;uCAGS,KAAKL,WAAL,CAAiBO,KAAjB,CAAuB,KAAKR,KAA5B,C;;;;;;;;;;;;;;;;;;;;;;;;;uCAIA,KAAKC,WAAL,CAAiBQ,IAAjB,E;;;;;;;;;;;;;;;;;;8BAmBK;AAAA,gBAAXC,IAAW,uEAAJ,EAAI;;AACX,+BAAiB,KAAKC,OAAtB,GAAgCD,IAAhC;AACH;;;6BAEIE,K,EAAM;AACP,iBAAKC,KAAL,GAAa,oCAAyBD,KAAzB,CAAb;AACA,mBAAO,IAAP;AACH;;;6BAEIE,O,EAA0B;AAAA;;AAAA,8CAAdC,YAAc;AAAdA,4BAAc;AAAA;;AAE3B,gBAAIC,eAAJ;;AAF2B,wCAGO,iCAAsBF,OAAtB,EAA+BC,YAA/B,CAHP;;AAAA;;AAG1BC,kBAH0B;AAGlBF,mBAHkB;AAGTC,wBAHS;;;AAK3B,gBAAME,QAAQ,qBAAd;AACA,gBAAMC,UAAU,sDAA8BJ,OAA9B,4BAA0CC,YAA1C,GAAhB;;AAEAE,kBAAMC,OAAN,GAAgB,eAAO;AACnB,oBAAIF,UAAUZ,IAAIY,MAAJ,KAAeA,MAA7B,EAAqC;AACjC,2BAAO,KAAP;AACH;;AAED,oBAAMG,SAASD,QAAQd,IAAIgB,GAAZ,CAAf;AACA,8BAAIC,KAAJ,CAAa,OAAKtB,KAAlB,UAA4BK,IAAIgB,GAAhC,UAAuCD,WAAW,KAAX,GAAmB,SAAnB,GAA+B,aAAtE,UAAuFL,QAAQQ,IAAR,CAAa,KAAb,CAAvF;;AAEA,uBAAOH,MAAP;AACH,aATD;;AAWAF,kBAAMM,SAAN,GAAkB,YAAM;AACpB,sBAAM,IAAIC,KAAJ,4BAAmCV,QAAQQ,IAAR,CAAa,KAAb,CAAnC,OAAN;AACH,aAFD;;AAIA,gBAAMG,SAAS,KAAKvB,OAApB;AACA,gBAAMwB,SAAS,IAAf;AACA,mBAAO,mBAAS,EAACT,YAAD,EAAQQ,cAAR,EAAgBV,0BAAhB,EAA8BW,cAA9B,EAAT,CAAP;AACH;;;4BAnDU;AACP,mBAAO,KAAK3B,KAAZ;AACH;;;4BAEa;AACV,gBAAMY,UAAU,KAAKV,WAAL,CAAiBU,OAAjC;AACI,oBAAQA,QAAQgB,MAAhB;AACI,qBAAK,MAAL;AAAa;AACT,+BAAU,KAAK1B,WAAL,CAAiBU,OAAjB,CAAyBA,OAAnC,SAA8C,KAAKV,WAAL,CAAiBU,OAAjB,CAAyBb,IAAvE;AACH;AACD,qBAAK,MAAL;AAAa;AACT,qCAAW,KAAKG,WAAL,CAAiBU,OAAjB,CAAyBA,OAApC,UAAgD,KAAKV,WAAL,CAAiBU,OAAjB,CAAyBb,IAAzE;AACH;AANL;AAQP;;;;;;kBAjCgBF,M","file":"Server.js","sourcesContent":["import { log } from 'froq-util';\nimport Router from './Router';\nimport Route from './Route';\nimport Connection from './Connection';\nimport Rest from './Rest';\n\n\nimport { transformRestTemplate, createPathMatcherFromTemplate, contentTypeLookupOrThrow } from './util';\n\nexport default class Server {\n    constructor(name, port) {\n        this._name = name;\n        this._port = port;\n\n        this._connection = new Connection(name);\n        this._router = new Router();\n\n        this._connection.setHandler((req, resp, next) => this._router.handle(req, resp, next));\n    }\n\n    async start() {\n        await this._connection.start(this._port);\n    }\n\n    async stop() {\n        await this._connection.stop();\n    }\n\n    get name() {\n        return this._name;\n    }\n\n    get address() {\n        const address = this._connection.address;\n            switch (address.family) {\n                case 'IPv4': {\n                    return `${this._connection.address.address}:${this._connection.address.port}`;\n                }\n                case 'IPv6': {\n                    return `[${this._connection.address.address}]:${this._connection.address.port}`;\n                }\n            }\n    }\n\n    url(path = '') {\n        return `http://${this.address}${path}`;\n    }\n\n    type(type) {\n        this._type = contentTypeLookupOrThrow(type);\n        return this;\n    }\n\n    rest(strings, ...placeholders) {\n\n        let method;\n        [method, strings, placeholders] = transformRestTemplate(strings, placeholders);\n\n        const route = new Route();\n        const matcher = createPathMatcherFromTemplate(strings, ...placeholders);\n        \n        route.matcher = req => {\n            if (method && req.method !== method) {\n                return false;\n            }\n\n            const result = matcher(req.url);\n            log.debug(`${this._name}: ${req.url} ${result !== false ? 'matches' : 'not matches'} ${strings.join('...')}`);\n\n            return result;\n        };\n\n        route.processor = () => {\n            throw new Error(`processor missing for ${strings.join('...')}.`);\n        };\n        \n        const router = this._router;\n        const server = this;\n        return new Rest({route, router, placeholders, server});\n    }\n}"]}