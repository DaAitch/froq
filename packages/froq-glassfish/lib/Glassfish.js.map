{"version":3,"sources":["../src/Glassfish.js"],"names":["defaultRetry","defaultWaitMillis","Glassfish","url","user","password","_url","_user","_password","_gftoken","undefined","_textAppendNextUrl","path","opts","retry","waitMillis","headers","cookie","authorization","Buffer","toString","info","JSON","stringify","response","warning","Promise","resolve","reject","_fetch","_restUrl","method","body","json","result","isSuccess","asError","gftoken","extraProperties","token","_auth","text","logs","filePath","type","contextRoot","parse","ext","substr","findIndex","t","name","id","createReadStream","formData","append","getHeaders","close"],"mappings":"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","file":"Glassfish.js","sourcesContent":["import fetch from 'node-fetch';\nimport { log } from 'froq-util';\nimport FormData from 'form-data';\nimport fs from 'fs';\nimport { format } from 'url';\nimport path from 'path';\nimport OperationResult from './OperationResult';\nimport { setTimeout } from 'timers';\n\nconst defaultRetry = 10;\nconst defaultWaitMillis = 1000;\n\nexport default class Glassfish {\n    constructor(url, user, password) {\n        this._url = url;\n        this._user = user;\n        this._password = password;\n        this._gftoken = undefined;\n        this._textAppendNextUrl = undefined;\n    }\n\n    _restUrl(path) {\n        return this._url + path;\n    }\n\n    async _fetch(\n        url,\n        opts,\n        {retry = defaultRetry, waitMillis = defaultWaitMillis} = {retry: defaultRetry, waitMillis: defaultWaitMillis}\n    ) {\n\n        opts = {...opts};\n        opts.headers = {\n            'x-requested-by': 'GlassFish REST HTML interface', // important -.-\n            'content-type': 'application/json',\n            ...(this._gftoken ? {\n                cookie: `gfresttoken=${this._gftoken}`\n            } : {\n                authorization: `Basic ${new Buffer(`${this._user}:${this._password}`).toString('base64')}`\n            }),\n            ...(opts.headers || {})\n        };\n        \n        log.info(`fetch ${url} with ${JSON.stringify(opts)}`);\n        let response;\n        try { \n            response = await fetch(url, opts);\n            return response;\n\n        } catch (e) {\n            if (retry <= 0) {\n                throw e; // rethrow\n            }\n\n            log.warning(`could not fetch ${url}, will retry ${retry}x in ${waitMillis}ms`)\n        }\n\n        --retry;\n        await new Promise((resolve, reject) => {\n            setTimeout(resolve, waitMillis);\n        });\n\n        return this._fetch(url, opts, {retry, waitMillis});        \n    }\n\n    async _auth() {\n        if (this._gftoken) {\n            return;\n        }\n\n        const response = await this._fetch(this._restUrl('/management/sessions.json'), {\n            method: 'POST',\n            body: JSON.stringify({})\n        });\n        \n        const json = await response.json();\n        const result = new OperationResult(json);\n        \n        if (!result.isSuccess()) {\n            throw result.asError();\n        }\n        \n        const gftoken = json.extraProperties.token;\n        log.info(`got token ${gftoken}`)\n        this._gftoken = gftoken;\n    }\n\n    async logs() {\n        await this._auth();\n\n        const response = await this._fetch(this._restUrl('/management/domain/view-log'), {\n            method: 'GET',\n            body: JSON.stringify({})\n        });\n\n        this._textAppendNextUrl = response.headers['X-Text-Append-Next'];\n\n        return await response.text();\n    }\n\n    async nextLogs() {\n        await this._auth();\n\n        if (!this._textAppendNextUrl) {\n            await this.logs();\n            return '';\n        }\n\n        const response = await this._fetch(this._textAppendNextUrl, {\n            method: 'GET',\n            body: JSON.stringify({})\n        });\n\n        this._textAppendNextUrl = response.headers['X-Text-Append-Next'];\n\n        return await response.text();\n    }\n\n    async deploy(filePath, {type, contextRoot} = {}) {\n        await this._auth();\n\n        \n\n        const parse = path.parse(filePath);\n\n        // type\n        type = type || parse.ext.substr(1); // without dot\n        if (['war', 'ear', 'rar', 'jar'].findIndex(t => t === type) === -1) {\n            type = 'other';\n        }\n\n        // context root\n        contextRoot = contextRoot || parse.name;\n\n\n        // id\n        const id = fs.createReadStream(filePath);\n\n        const formData = new FormData();\n        formData.append('id', fs.createReadStream(filePath));\n        formData.append('type', type);\n        formData.append('contextroot', contextRoot)\n        \n        \n        const response = await this._fetch(this._restUrl('/management/domain/applications/deploy.json'), {\n            method: 'POST',\n            headers: formData.getHeaders(),\n            body: formData\n        });\n\n        id.close();\n\n        return new OperationResult(await response.json());\n    }\n}"]}