{"version":3,"sources":["../src/Glassfish.js"],"names":["Glassfish","url","user","password","_url","_user","_password","_gftoken","undefined","_textAppendNextUrl","path","opts","headers","cookie","authorization","Buffer","toString","info","JSON","stringify","response","_fetch","_restUrl","method","body","json","gftoken","extraProperties","token","_auth","text","logs","filePath","type","contextRoot","parse","ext","substr","findIndex","t","name","id","createReadStream","formData","append","getHeaders","close"],"mappings":"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","file":"Glassfish.js","sourcesContent":["import fetch from 'node-fetch';\nimport log from '../log';\nimport FormData from 'form-data';\nimport fs from 'fs';\nimport { format } from 'url';\nimport path from 'path';\nimport OperationResult from './OperationResult';\n\nexport default class Glassfish {\n    constructor(url, user, password) {\n        this._url = url;\n        this._user = user;\n        this._password = password;\n        this._gftoken = undefined;\n        this._textAppendNextUrl = undefined;\n    }\n\n    _restUrl(path) {\n        return this._url + path;\n    }\n\n    async _fetch(url, opts) {\n\n        opts = {...opts};\n        opts.headers = {\n            'x-requested-by': 'GlassFish REST HTML interface', // important -.-\n            'content-type': 'application/json',\n            ...(this._gftoken ? {\n                cookie: `gfresttoken=${this._gftoken}`\n            } : {\n                authorization: `Basic ${new Buffer(`${this._user}:${this._password}`).toString('base64')}`\n            }),\n            ...(opts.headers || {})\n        };\n        \n        log.info(`fetch ${url} with ${JSON.stringify(opts)}`);\n        const response = await fetch(url, opts);\n\n        return response;\n    }\n\n    async _auth() {\n        if (this._gftoken) {\n            return;\n        }\n\n        const response = await this._fetch(this._restUrl('/management/sessions.json'), {\n            method: 'POST',\n            body: JSON.stringify({})\n        });\n\n        const json = await response.json();\n\n        const gftoken = json.extraProperties.token;\n        log.info(`got token ${gftoken}`)\n        this._gftoken = gftoken;\n    }\n\n    async logs() {\n        await this._auth();\n\n        const response = await this._fetch(this._restUrl('/management/domain/view-log'), {\n            method: 'GET',\n            body: JSON.stringify({})\n        });\n\n        this._textAppendNextUrl = response.headers['X-Text-Append-Next'];\n\n        return await response.text();\n    }\n\n    async nextLogs() {\n        await this._auth();\n\n        if (!this._textAppendNextUrl) {\n            await this.logs();\n            return '';\n        }\n\n        const response = await this._fetch(this._textAppendNextUrl, {\n            method: 'GET',\n            body: JSON.stringify({})\n        });\n\n        this._textAppendNextUrl = response.headers['X-Text-Append-Next'];\n\n        return await response.text();\n    }\n\n    async deploy(filePath, {type, contextRoot} = {}) {\n        await this._auth();\n\n        \n\n        const parse = path.parse(filePath);\n\n        // type\n        type = type || parse.ext.substr(1); // without dot\n        if (['war', 'ear', 'rar', 'jar'].findIndex(t => t === type) === -1) {\n            type = 'other';\n        }\n\n        // context root\n        contextRoot = contextRoot || parse.name;\n\n\n        // id\n        const id = fs.createReadStream(filePath);\n\n        const formData = new FormData();\n        formData.append('id', fs.createReadStream(filePath));\n        formData.append('type', type);\n        formData.append('contextroot', contextRoot)\n        \n        \n        const response = await this._fetch(this._restUrl('/management/domain/applications/deploy.json'), {\n            method: 'POST',\n            headers: formData.getHeaders(),\n            body: formData\n        });\n\n        id.close();\n\n        return new OperationResult(await response.json());\n    }\n}"]}