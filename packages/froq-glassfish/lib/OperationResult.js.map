{"version":3,"sources":["../src/OperationResult.js"],"names":["OperationResult","json","_json","exitCode","Error","message","command","exit_code","extraProperties","childResources","commandLog","commands","map","entity","methods","method"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;IAEqBA,e;AACjB,6BAAYC,IAAZ,EAAkB;AAAA;;AACd,aAAKC,KAAL,GAAaD,IAAb;AACH;;;;oCAEW;AACR,mBAAO,KAAKE,QAAL,KAAkB,SAAzB;AACH;;AAED;;;;;;;;;kCA+EU;AACN,mBAAO,IAAIC,KAAJ,iBAAwB,KAAKD,QAA7B,mBAAmD,KAAKE,OAAxD,CAAP;AACH;;;4BA3Ea;AACV,mBAAO,KAAKH,KAAL,CAAWI,OAAlB;AACH;;AAED;;;;;;;4BAIe;AACX,mBAAO,KAAKJ,KAAL,CAAWK,SAAlB;AACH;;AAED;;;;;;;;;4BAMqB;AACjB,mBAAO,KAAKL,KAAL,CAAWM,eAAX,IACA,KAAKN,KAAL,CAAWM,eAAX,CAA2BC,cADlC;AAEH;;AAED;;;;;;;;4BAKiB;AACb,mBAAO,KAAKP,KAAL,CAAWM,eAAX,IACJ,KAAKN,KAAL,CAAWM,eAAX,CAA2BE,UAD9B;AAEH;;AAED;;;;;;;;;4BAMe;AACX,gBAAMC,WAAY,KAAKT,KAAL,CAAWM,eAAX,IAA8B,KAAKN,KAAL,CAAWM,eAAX,CAA2BG,QAA1D,IAAuE,EAAxF;AACA,mBAAOA,SAASC,GAAT,CAAa;AAAA,uBAAW,sBAAYN,OAAZ,CAAX;AAAA,aAAb,CAAP;AACH;;AAED;;;;;;;;4BAKa;AACT,mBAAO,KAAKJ,KAAL,CAAWM,eAAX,IACJ,KAAKN,KAAL,CAAWM,eAAX,CAA2BK,MAD9B;AAEH;;AAED;;;;;;;;4BAKc;AACV,gBAAMC,UAAW,KAAKZ,KAAL,CAAWM,eAAX,IAA8B,KAAKN,KAAL,CAAWM,eAAX,CAA2BM,OAA1D,IAAsE,EAAtF;AACA,mBAAOA,QAAQF,GAAR,CAAY;AAAA,uBAAU,qBAAWG,MAAX,CAAV;AAAA,aAAZ,CAAP;AACH;;AAED;;;;;;;;4BAKc;AACV,mBAAO,KAAKb,KAAL,CAAWG,OAAlB;AACH;;;;;;kBAtFgBL,e","file":"OperationResult.js","sourcesContent":["import Command from \"./Command\";\nimport Method from \"./Method\";\n\nexport default class OperationResult {\n    constructor(json) {\n        this._json = json;\n    }\n\n    isSuccess() {\n        return this.exitCode === 'SUCCESS';\n    }\n\n    /**\n     * The name of the resource/object that is the target\n     * of the operation (in case of a successful operation)\n     * or the name of the method or command executed (in\n     * case of a failed operation).\n     */\n    get command() {\n        return this._json.command;\n    }\n\n    /**\n     * The result of the operationâ€™s execution, either\n     * SUCCESS or FAILURE.\n     */\n    get exitCode() {\n        return this._json.exit_code;\n    }\n\n    /**\n     * A list of child resources for the target resource.\n     * Each child resource is specified as a key-value pair\n     * of the resource`s name and it`s URL. This property is\n     * only available for the results of query operations.\n     */\n    get childResources() {\n        return this._json.extraProperties\n            && this._json.extraProperties.childResources;\n    }\n\n    /**\n     * A string detailing the exact asadmin command executed\n     * on the server. This property is only available for the\n     * results of add, update or delete operations.\n     */\n    get commandLog() {\n        return this._json.extraProperties\n        && this._json.extraProperties.commandLog;\n    }\n\n    /**\n     * A list of metadata sets of the available non-CRUD\n     * operations (asadmin subcommands) that can be executed\n     * on the target resource. This property is only available\n     * for the results of query operations.\n     */\n    get commands() {\n        const commands = (this._json.extraProperties && this._json.extraProperties.commands) || [];\n        return commands.map(command => new Command(command));\n    }\n\n    /**\n     * Represents the current configuration of a resource.\n     * Each property of the resource is configured as a\n     * key-value pair of the object itself.\n     */\n    get entity() {\n        return this._json.extraProperties\n        && this._json.extraProperties.entity;\n    }\n\n    /**\n     * A list of medatada sets of available CRUD methods\n     * that the target resource supports. This property\n     * is only available for the results of query operations.\n     */\n    get methods() {\n        const methods = (this._json.extraProperties && this._json.extraProperties.methods) || [];\n        return methods.map(method => new Method(method));\n    }\n\n    /**\n     * Details the message the server sends in case of \n     * encountering an error in executing the operation. \n     * If no error was encountered, this property is empty.\n     */\n    get message() {\n        return this._json.message;\n    }\n\n    asError() {\n        return new Error(`exit_code: ${this.exitCode}, message: ${this.message}`);\n    }\n}"]}